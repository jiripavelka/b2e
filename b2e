#!/bin/bash

colorize () {
  sed "s/--\?[a-zA-Z]\+\|$SCRIPT_NAME\|^[A-Z].\+/\\\e[1;37m\0\\\e[m/g"
}
format_usage () {
  fmt -w "$(tput cols)" | colorize
}
exception () {
  echo "$SCRIPT_NAME: ${1:-"Unknown error"}" >&2
  exit "${2:-1}"
}
git_init () {
  $DRY_RUN \
    && exit
  git -C "$ROOT_DIR" init $VERBOSE \
    && echo -e "/*\n!.gitignore\n!/$RES_DIR" > .gitignore \
    && git_commit "Init git" "--quiet --allow-empty" \
    || exit 1
}
git_checkout () {
  $DRY_RUN \
    && return
  BRANCH_EXISTS="$(git -C "$ROOT_DIR" branch | grep "^\  $1$")"
  git -C "$ROOT_DIR" checkout $VERBOSE -B "$1" \
    || exit 1
  [[ "$BRANCH_EXISTS" != "" ]] \
    && return
  rm -rf "$ROOT_DIR/$RES_DIR" \
    && git_commit "Init branch $1" "--quiet --allow-empty" \
    || exit 1
}
git_commit () {
  $DRY_RUN \
    && return
  git -C "$ROOT_DIR" add --all \
    && git -C "$ROOT_DIR" commit $2 -am "$SCRIPT_NAME: ${1:-"No message"}" | head -n2
  return $?
}
git_status () {
  git -C "$ROOT_DIR" status --porcelain 2>&1 \
    || exit 1
}

RES_DIR="src"
ROOT_DEPTH=1
DRY_RUN=false
VERBOSE="--quiet"
SCRIPT_NAME="$(basename "$0")"
USAGE="$(cat << STR | format_usage
DESCRIPTION
       $SCRIPT_NAME synces files from SOURCE folder into DESTINATION on corresponding branches using git.
       
USAGE 
       $SCRIPT_NAME [-h] [-r N] SOURCE [DESTINATION]

OPTIONS
       -h, --help
              Display this usage.

       -n, --dry-run
              Perform a trial run with no changes made.

       -p N, --parent-folder=N
              Preserve N parent folders from SOURCE (default 1).

       -v, --verbose
              Increase verbosity
STR
)"

LINE=$(getopt \
  -n "$0" \
  -o hnp:v \
  -l help,dry-run,parent-folder,verbose: \
  -- "$@") \
  || exit 1
eval set -- "$LINE"
while [ $# -gt 0 ]; do 
  case $1 in
    -h|--help) echo -e "$USAGE" && exit 0 ;;
    -n|--dry-run) DRY_RUN=true; shift ;;
    -p|--parent-folder) ROOT_DEPTH="$2"; shift 2 ;;
    -v|--verbose) VERBOSE=""; shift ;;
    --) shift; break ;;
    *-) exception "Unrecognized option '$1'" 2 ;;
     *) break ;;
  esac
done

SRC_DIR="$1"
ROOT_DIR="${2:-.}"

[[ -n "$SRC_DIR" ]] \
  || exception "Missing source folder" 2
[[ -d "$SRC_DIR" ]] \
  || exception "Source folder $SRC_DIR does not exist"
[[ -d "$ROOT_DIR/$RES_DIR" ]] \
  || exception "Destination folder $ROOT_DIR/$RES_DIR does not exist"
[[ "$ROOT_DEPTH" =~ ^[1-9][0-9]*$ ]] \
  || exception "Invalid parent-folder value '$ROOT_DEPTH'" 2
[[ -d "$ROOT_DIR/.git" ]] \
  || git_init
[[ -z "$(git_status)" ]] \
  || git_commit "Autocommit" "$VERBOSE"

PRJ_DIR="$(realpath "$SRC_DIR" | rev | cut -d "/" -f-"$ROOT_DEPTH" | rev)"
BRANCH_NAME="$(echo "$PRJ_DIR" | tr "/" "-")"
DEST_DIR="$ROOT_DIR/$RES_DIR/$(echo "$PRJ_DIR/" | cut -d "/" -f2-)"
git -C "$ROOT_DIR" branch | grep -q "^\* $BRANCH_NAME$" \
  || git_checkout "$BRANCH_NAME"

$DRY_RUN \
  && exit
mkdir -p "$DEST_DIR" \
  && rsync -r $VERBOSE --delete "$SRC_DIR/" "$DEST_DIR" \
  || exit 1
git_commit "Sync folder $BRANCH_NAME" "$VERBOSE"
